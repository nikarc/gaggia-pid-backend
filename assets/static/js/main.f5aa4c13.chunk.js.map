{"version":3,"sources":["components/AppButton.tsx","utilities/index.js","constants/index.js","components/TemperatureRing.tsx","views/BrewPanel.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Button","styled","button","buttonHeight","AppButton","props","children","className","colors","sizes","calculateTempForRing","temp","Math","floor","MAX_TEMP","Svg","svg","transparentize","RingWrap","div","Temp","TempReadout","p","TemperatureRing","temperatureRing","temperatureRingStroke","rSize","PI","useState","viewBox","cx","cy","strokeWidth","r","onMouseMove","console","log","strokeDasharray","color","size","BrewButton","BrewPanelWrap","BrewPanelSettings","BrewPanel","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"mjBAGA,IACMA,EAASC,IAAOC,OAAV,IADS,GAIAC,IAwBNC,EAZmB,SAACC,GAAW,IAEtCC,EAEAD,EAFAC,SACAC,EACAF,EADAE,UAGJ,OACI,kBAACP,EAAD,CAAQO,UAAWA,GAAYD,I,wBCpB1BE,EACJ,yBAGIC,EACQ,IADRA,EAEc,GAGdC,EAAuB,SAAAC,GAGhC,OAAOC,KAAKC,OAAQF,ECjBA,KDeNG,GCdc,M,u8BCKhC,IAAMC,EAAMd,IAAOe,IAAV,IDLuB,ICWnBP,EACCA,EAWQQ,YAAe,GAAKT,GAIpBA,GAMhBU,EAAWjB,IAAOkB,IAAV,KAIRC,EAAOnB,IAAOkB,IAAV,KAQJE,EAAcpB,IAAOqB,EAAV,KAuCFC,EAnCS,WAAO,IACnBC,EAA2Cf,EAA1BgB,EAA0BhB,EAC7CiB,EDnDsB,KCmDM,EAAId,KAAKe,IAFjB,EAIFC,mBAAS,KAJP,mBAInBjB,EAJmB,UAQ1B,OACI,kBAACO,EAAD,KACI,kBAACH,EAAD,CAAKR,UAAU,mBAAmBsB,QAAO,cAASL,EAAT,YAA4BA,IACjE,uBAAGjB,UAAU,QACT,4BACIA,UAAU,mBACVuB,GAAG,MAAMC,GAAG,MACZC,YAAaP,EACbQ,EAAGP,IACP,4BACIQ,YAZJ,kBAAMC,QAAQC,IAAI,aAad7B,UAAU,kBACVuB,GAAG,MAAMC,GAAG,MACZC,YAAaP,EACbQ,EAAGP,EACHW,gBAAe,UAAK3B,EAAqBC,GAA1B,aDxEP,SC2EpB,kBAACS,EAAD,KACI,kBAAC,IAAD,CAAakB,MAAM,QAAQC,KAAM,KACjC,kBAAClB,EAAD,eAAiBV,EAAjB,SACA,6C,yVC1EhB,IAAM6B,EAAavC,YAAOG,EAAPH,CAAH,KAIVwC,EAAgBxC,IAAOkB,IAAV,KAMbuB,EAAoBzC,IAAOkB,IAAV,KAoBRwB,EAXmB,SAAC,GAAD,IAAGpC,EAAH,EAAGA,UAAH,OAC9B,yBAAKA,UAAU,cACX,kBAACkC,EAAD,CAAelC,UAAU,oBACrB,kBAACmC,EAAD,CAAmBnC,UAAU,wBACzB,kBAAC,EAAD,OAEJ,kBAACiC,EAAD,CAAYjC,UAAWA,GAAvB,WCjBGqC,MARf,WACE,OACE,yBAAKrC,UAAU,OACX,kBAAC,EAAD,CAAWA,UAAU,iBCGTsC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL3B,QAAQ2B,MAAMA,EAAMC,c","file":"static/js/main.f5aa4c13.chunk.js","sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\n\nconst buttonHeight = 40;\nconst Button = styled.button`\n    width: auto;\n    height: ${buttonHeight}px;\n    border-radius: ${buttonHeight / 2}px;\n    box-shadow: 0px, 4px, 4px, rgba(0, 0, 0, 0.25);\n    color: white;\n    background-color: #7d7d7d;\n    text-transform: uppercase;\n`;\n\ninterface Props {\n    children: React.ReactNode\n    className: string\n}\n\nconst AppButton:React.FC<Props> = (props) => {\n    const {\n        children,\n        className,\n    } = props;\n\n    return (\n        <Button className={className}>{children}</Button>\n    )\n}\n\n\nexport default AppButton;\n","import {\n    MAX_TEMP,\n    MIN_TEMP,\n    TEMP_RING_CIRCUM,\n} from '../constants';\n\nexport const colors = {\n    red: 'hsl(356.1,75.4%,52.2%)'\n};\n\nexport const sizes = {\n    temperatureRing: 200,\n    temperatureRingStroke: 25\n};\n\nexport const calculateTempForRing = temp => {\n    const scale = MAX_TEMP - MIN_TEMP;\n\n    return Math.floor(((temp - MIN_TEMP) / scale) * TEMP_RING_CIRCUM);\n}\n","export const MAX_TEMP = 215;\nexport const MIN_TEMP = 180;\nexport const TEMP_RING_CIRCUM = 500;\n","import React, { useState } from 'react';\nimport styled from 'styled-components';\nimport { Thermometer } from 'react-feather';\nimport { transparentize } from 'polished';\nimport { TEMP_RING_CIRCUM } from '../constants';\nimport { colors, sizes, calculateTempForRing } from '../utilities';\n\nconst Svg = styled.svg`\n    @keyframes RingProgress {\n        0% {\n            stroke-dasharray: 0 ${TEMP_RING_CIRCUM};\n        }\n    }\n    width: ${sizes.temperatureRing}px;\n    height: ${sizes.temperatureRing}px;\n    transform: rotate(125deg);\n\n    circle {\n        fill: none;\n    }\n\n    .ring {\n        transform-origin: 50%;\n\n        .ring__background {\n            stroke: ${transparentize(0.6, colors.red)};\n        }\n        .ring__completed {\n            stroke-linecap: round;\n            stroke: ${colors.red};\n            animation: RingProgress 0.4s ease-in-out forwards;\n        }\n    }\n`;\n\nconst RingWrap = styled.div`\n    position: relative;\n`;\n\nconst Temp = styled.div`\n    text-align: center;\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, calc(-50% - 10px));\n`;\n\nconst TempReadout = styled.p`\n    font-size: 40px;\n`;\n\nconst TemperatureRing = () => {\n    const { temperatureRing, temperatureRingStroke } = sizes;\n    const rSize = TEMP_RING_CIRCUM / (2 * Math.PI);\n\n    const [temp, setTemp] = useState(204);\n\n    const dragEnd = () => console.log('drag end');\n\n    return (\n        <RingWrap>\n            <Svg className=\"temperature-ring\" viewBox={`0 0 ${temperatureRing} ${temperatureRing}`}>\n                <g className=\"ring\">\n                    <circle\n                        className=\"ring__background\"\n                        cx=\"50%\" cy=\"50%\"\n                        strokeWidth={temperatureRingStroke}\n                        r={rSize} />\n                    <circle\n                        onMouseMove={dragEnd}\n                        className=\"ring__completed\"\n                        cx=\"50%\" cy=\"50%\"\n                        strokeWidth={temperatureRingStroke}\n                        r={rSize}\n                        strokeDasharray={`${calculateTempForRing(temp)}, ${TEMP_RING_CIRCUM}`} />\n                </g>\n            </Svg>\n            <Temp>\n                <Thermometer color=\"black\" size={24} />\n                <TempReadout>{`${temp}ยบ`}</TempReadout>\n                <small>198ยบ</small>\n            </Temp>\n        </RingWrap>\n    )\n};\n\nexport default TemperatureRing;\n","import React from 'react';\nimport styled from 'styled-components';\n\nimport AppButton from '../components/AppButton';\nimport TemperatureRing from '../components/TemperatureRing';\n\nconst BrewButton = styled(AppButton)`\n    width: 320px;\n`;\n\nconst BrewPanelWrap = styled.div`\n    display: flex;\n    justify-content: center;\n    flex-wrap: wrap;\n`;\n\nconst BrewPanelSettings = styled.div`\n    flex: 0 0 100%;\n    display: flex;\n`;\n\ninterface Props {\n    className: string\n}\n\nconst BrewPanel:React.FC<Props> = ({ className }) => (\n    <div className=\"brew-panel\">\n        <BrewPanelWrap className=\"brew-panel__wrap\">\n            <BrewPanelSettings className=\"brew-panel__settings\">\n                <TemperatureRing />\n            </BrewPanelSettings>\n            <BrewButton className={className}>Brew</BrewButton>\n        </BrewPanelWrap>\n    </div>\n);\n\nexport default BrewPanel;\n","import React from 'react';\nimport './styles/reset.css';\nimport './styles/App.scss';\n\nimport BrewPanel from './views/BrewPanel';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <BrewPanel className=\"brew-panel\" />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}